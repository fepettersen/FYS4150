void rotate(mat &A, mat &R, int k, int l, int n){
    //Takes in matrices A and R, and the integers k and l which
    //contain the index of the largest element in A (A(k,l)). n is
    //the size of A and R.

    double s,c;
    if(A(k,l)!=0.0){ 
	//If the largest element i zero we are golden
	//this part calculates tau = cot(2*theta)
	//t = tan(theta), c= cos(theta) and s = sin(theta). It also 
	//chooses the smallest theta according to calculations earlier.
        
	double tau,t;
        tau = (A(l,l)-A(k,k))/(2*A(k,l));
        if(tau>0){
            t = 1.0/(tau + sqrt(1.0 + tau*tau));
        }
        else{
            t = -1.0/(-tau +sqrt(1.0+tau*tau));
        }
        c = 1.0/sqrt(1.0+t*t);
        s = t*c;
    }
    else{
        c = 1.0;s = 0.0;
    }

    //The following part does the matrix multiplications element by
    //element and replaces the relevant new elements in input-
    //matrix, A, to save memory.
    double a_kk,a_ll,a_il,a_ik,r_ik,r_il;
    a_kk = A(k,k);
    a_ll = A(l,l);
    A(k,k) = c*c*a_kk -2.0*c*s*A(k,l) +s*s*a_ll;
    A(l,l) = s*s*a_kk +2.0*c*s*A(k,l) +c*c*a_ll;

    for(int i=0;i<n;i++){
        if(i != k && i != l){
            a_ik = A(i,k);
            a_il = A(i,l);
            A(i,k) = c*a_ik - s*a_il;
            A(k,i) = A(i,k);	// A is symmetric
            A(i,l) = c*a_il + s*a_ik;
            A(l,i) = A(i,l);	// A is symmetric
        }
	
	//This part updates the eigenvectors
        r_ik = R(i,k);
        r_il = R(i,l);
        R(i,k) = c*r_ik - s*r_il;
        R(i,l) = c*r_il + s*r_ik;
    }
    A(k,l) = 0.0; //hardcoding of the elements we make zero by rotation
    A(l,k) = 0.0; //same here
    return;
}
